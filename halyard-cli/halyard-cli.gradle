dependencies {
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'

  implementation 'org.springframework.boot:spring-boot'
  implementation "com.netflix.spinnaker.fiat:fiat-core:$fiatVersion"
  implementation 'com.netflix.spinnaker.kork:kork-secrets'
  implementation 'org.apache.commons:commons-lang3'
  implementation 'org.apache.commons:commons-text:1.6'
  implementation 'ch.qos.logback:logback-classic'
  implementation 'com.squareup.retrofit:retrofit'
  implementation 'com.squareup.retrofit:converter-jackson'
  implementation 'com.fasterxml.jackson.core:jackson-annotations'
  implementation 'com.fasterxml.jackson.core:jackson-core'
  implementation 'com.fasterxml.jackson.core:jackson-databind'
  implementation 'org.aspectj:aspectjweaver'
  implementation 'org.yaml:snakeyaml:1.24'
  implementation 'org.codehaus.groovy:groovy'
  implementation('com.beust:jcommander:1.71') {
    // 1.72 made JCommander.getMainParameter() weird
    // This was reverted in master but not released yet. Sticking with 1.71 instead of catching NPE in
    // com.netflix.spinnaker.halyard.cli.command.v1.NestableCommand :287 and :414
    force = true
  }
  implementation 'org.nibor.autolink:autolink:0.10.0'

  implementation project(':halyard-config')
  implementation project(':halyard-core')
  implementation project(':halyard-deploy')
  implementation project(':halyard-proto')

  testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
  testImplementation 'org.springframework:spring-test'
}

apply plugin: 'application'

mainClassName = 'com.netflix.spinnaker.halyard.cli.Main'

task generateDocs(type: Exec, dependsOn: installDist) {
  workingDir "$projectDir"
  commandLine './hal', '--docs'
  standardOutput new ByteArrayOutputStream()
  doLast {
    ext.output = standardOutput.toString()
  }
}

task checkDocs(dependsOn: generateDocs) {
  doLast {
    def newDocs = tasks.generateDocs.output
    def currentDocs = new File("$projectDir/../docs/commands.md").text
    if (newDocs != currentDocs) {
      throw new GradleException('The docs for halyard-cli are out of date. Regenerate them by running the :halyard-cli:updateDocs gradle task.')
    }
  }
}

task updateDocs(dependsOn: generateDocs) {
  doLast {
    new File("$projectDir/../docs/commands.md").withWriter { writer ->
      writer.write(tasks.generateDocs.output)
    }
  }
}

tasks.check.dependsOn(checkDocs)
