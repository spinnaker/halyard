apply plugin: 'io.spinnaker.package'

ext {
  springConfigLocation = System.getProperty('spring.config.additional-location', "${System.getProperty('user.home')}/.spinnaker/".toString())
}

run {
  systemProperty('spring.config.additional-location', project.springConfigLocation)
}
mainClassName = 'com.netflix.spinnaker.halyard.Main'

configurations.all {
  exclude group: 'javax.servlet', module: 'servlet-api'
  exclude group: "org.slf4j", module: "slf4j-log4j12"
}

tasks.withType(JavaExec) {
  if (System.getProperty('DEBUG', 'false') == 'true') {
    jvmArgs '-Xdebug', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=9099'
  }
}

dependencies {
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'

  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.apache.commons:commons-lang3'
  implementation 'com.squareup.retrofit:retrofit'
  implementation 'org.lognet:grpc-spring-boot-starter:2.3.2'
  implementation 'org.codehaus.groovy:groovy'
  implementation "com.netflix.spinnaker.kork:kork-web"
  implementation "com.netflix.spinnaker.kork:kork-config"

  implementation project(':halyard-backup')
  // halyard-cli is required as a dependency even though it is not used directly by halyard-web
  // because the halyard installation only install halyard-web but the CLI expects to find the
  // halyard-cli jar file in the install directory
  implementation project(':halyard-cli')
  implementation project(':halyard-config')
  implementation project(':halyard-core')
  implementation project(':halyard-deploy')
  implementation project(':halyard-proto')
}

def cliScript = project.tasks.create('createCliStartScripts', CreateStartScripts) {
  dependsOn(project.tasks.startScripts)
  mainClassName = 'com.netflix.spinnaker.halyard.cli.Main'
  applicationName = 'hal'
  outputDir = project.tasks.startScripts.outputDir
  classpath = project.tasks.startScripts.classpath
}

tasks.installDist.dependsOn(cliScript)
tasks.distZip.dependsOn(cliScript)
tasks.distTar.dependsOn(cliScript)
